<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[单例模式]]></title>
    <url>%2F2018%2F03%2F12%2Fsingleton%2F</url>
    <content type="text"><![CDATA[单例模式的实现单例模式有最基本的饿汉与懒汉模式，之后为了弥补线程安全及效率问题引进了双重检查加锁模式； 更进阶的，可以使用内部静态类的模式来延迟加载； 最后还有个简单且无法通过反射来获取多个实例的实现方式：枚举类 饿汉单例1234567public class Singleton&#123; private static Singleton s = new Singleton(); private Singleton()&#123;&#125; public static Singleton getInstance()&#123; return s; &#125;&#125; 嗯，类加载的时候就已经创建了Singleton静态实例，说明很“饥饿”。这种方式效率高（线程安全），但是没有延迟加载（一直占用空间）。 懒汉式–线程安全12345678910public class Singleton&#123; private static Singleton s; private Singleton()&#123;&#125; public static synchronized Singleton getInstance()&#123; if(s == null)&#123; s = new Singleton(); &#125; return s; &#125;&#125; 这种方式安全，达到延迟的目的，但效率太低（为了线程安全，整个方法都加了锁）。 双重检查加锁1234567891011121314public class Singleton&#123; private static volatile Singleton s; private Singleton()&#123;&#125; public static Singleton getInstance()&#123; if(s == null)&#123; synchronized（Singleton.class）&#123; if(s == null)&#123; s = new Singleton(); &#125; &#125; &#125; return s; &#125;&#125; 各方面都满足要求（只有第一次创建实例的时候会加锁），java 1.5 后volatile关键字能够禁止代码重排序。===&gt;ps:为何要加volatile假设没有关键字volatile的情况下，两个线程A、B，都是第一次调用该单例方法，线程A先执行instance = new Instance()，该构造方法是一个非原子操作，编译后生成多条字节码指令，由于JAVA的指令重排序，可能会先执行instance的赋值操作，该操作实际只是在内存中开辟一片存储对象的区域后直接返回内存的引用，之后instance便不为空了，但是实际的初始化操作却还没有执行，如果就在此时线程B进入，就会看到一个不为空的但是不完整（没有完成初始化）的Instance对象，所以需要加入volatile关键字，禁止指令重排序优化，从而安全的实现单例。 内部静态类，Initialization On Demand Holder idiom12345678910public class Singleton&#123; private Singleton()&#123;&#125; private static class SingletionHolder&#123; public static final Singleton s = new Singleton(); &#125; public static Singleton getInstance()&#123; return SingletonHolder.s; &#125;&#125; 这种方式能保证单例的线程安全的原因：①静态内部类只有第一次使用才会加载，保证了延迟性；②因为静态内部类初始化的时候是通过JVM保证线程安全的，所以有线程安全的天然优势。 使用枚举（推荐）12345678enum Singleton &#123; INSTANCE; public void doSomething()&#123; System.out.println("I am writing!"); &#125;&#125;Singleton s = Singleton.INSTANCE; 为什么推荐这种呢？因为简单！而且这种方式无法通过反射获取单例类。 P.S.方法1到4都可以通过反射获取新的单例,如下1234Class&lt;Singleton&gt; clz = Singleton.class;Constructor&lt;Singleton&gt; con == clz.getDeclaredConstructor(new Class[] &#123;&#125;);con.setAccessible(true);Singleton s3 = con.newInstance(new Object[] &#123;&#125;);]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇文章]]></title>
    <url>%2F2018%2F03%2F01%2Fmy-first-blog%2F</url>
    <content type="text"></content>
  </entry>
</search>
